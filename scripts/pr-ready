#!/usr/bin/env python

import datetime
import dateutil.tz
from dateutil.relativedelta import relativedelta
import argparse

MSG="""
This PR is ready for review/comment. I will leave it open for at least
{delay_hours} hours, merging no earlier than {GMT} ({local} my local).
"""

def make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('delay_hours', type=int)
    return parser

def get_release_time(delay_hours):
    now = datetime.datetime.now().astimezone()
    delta = relativedelta(hours=+delay_hours, hour=now.hour + 1, minute=0,
                          second=0, microsecond=0)
    return now + delta

def get_gmt_local_str(release_time):
    gmt = dateutil.tz.gettz('GMT')
    as_gmt = release_time.astimezone(gmt)
    gmt_fmt = "%A %d %B %H:%M GMT"
    short_local_fmt = "%H:%M"
    long_local_fmt = "%a %d %b %H:%M"
    if as_gmt.day == release_time.day:
        local_fmt = short_local_fmt
    else:
        local_fmt = long_local_fmt

    release_gmt = as_gmt.strftime(gmt_fmt)
    release_local = release_time.strftime(local_fmt)
    return (release_gmt, release_local)

def create_message(release_time, delay_hours):
    release_gmt, release_local = get_gmt_local_str(release_time)
    return MSG.format(delay_hours=delay_hours, GMT=release_gmt,
                      local=release_local)

if __name__ == "__main__":
    parser = make_parser()
    opts = parser.parse_args()
    release_time = get_release_time(opts.delay_hours)
    print(create_message(release_time, opts.delay_hours))
